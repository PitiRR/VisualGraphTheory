<!DOCTYPE html>
<meta charset="utf-8">
<html lang="en">
    <script src="https://d3js.org/d3.v4.js"></script>
    <!-- below: used as tooltip to nodes -->
    <style> 
      div.tooltip {
        position: absolute;
        text-align: center;
        padding: .5rem;
        background: #FFFFFF;
        color: #313639;
        border: 1px solid #313639;
        border-radius: 8px;
        pointer-events: none;
        font-size: 1rem;
    }
    </style>
    <head>
    <%- include('../partials/head'); %>
    </head>
    <body class="container">

    <header>
    <%- include('../partials/header'); %>
    </header>

    <main>
    <div class="jumbotron">
        <h1>Welcome to the Arbitrage visualizer</h1>
        <p>Below are the results of the arbitrage search.
          <% if(path) { %>
            There exists a negative cycle! See highlighted links below.
            <% } else { %>
              Unfortunately, no negative cycle has been found at this time.
          <% } %>
        </p>
    </div>
    <div class="jumbotron" id="my_dataviz">
      <h1>Here's the graph:</h1>
    </div>
    <div class="jumbotron">
        <h1>Here's the data:</h1>
        <div>
          <table class="table table-sm table-hover">
            <thead><tr><th scope="col" >Nodes</th></tr></thead>
              <% var nodes = [] %>
              <% graph.nodes.forEach(obj => { Object.entries(obj).forEach(([_, v]) => { %>
              <% nodes.push(v) %>
              <% })}) %>
              <% nodes.forEach(elm => { %>
                <tr> <td><%= elm %> </td> </tr>
              <% }) %>
        </table>
        <table class="table table-sm table-hover">
          <thead>
            <tr>
              <th scope="col">Source</th>
              <th scope="col">Target</th>
              <th scope="col">Weight</th>
              <th scope="col">Cantor</th>
            </tr>
          </thead>
          <% var links = [] %>
          <% graph.links.forEach(obj => { links.push(obj) })%>
          <% links.forEach(elm => { %>
            <tr><td><%=elm.source%></td><td><%=elm.target%></td><td><%=elm.weight%></td><td><%=elm.cantor%></td></tr><% }) %>
        </table>
          <div>
            <% if(path) { %>
            <table id="table-path">
              <caption>Those links belong to a negative cycle.</caption>
              <thead>
                <tr>
                  <th>Source</th>
                  <th>Target</th>
                  <th>Weight</th>
                  <th>Cantor</th>
                </tr>
              </thead>
              <% var cycleLinks = links.filter(elm => {elm.cycle == true}) %>
              <% cycleLinks.forEach(elm => { %>
                <tr><td><%=elm.source%></td><td><%=elm.target%></td><td><%=elm.weight%></td><td><%=elm.cantor%></td></tr><% }) %>
            </table>
             <%} else { %>
                <p>No negative cycle found.</p>
            <% } %>
          </div>
        </div>
    </div>
    </main>
    <footer>
    <%- include('../partials/footer'); %>
    </footer>

    </body>
    <script>
      let data = <%-JSON.stringify({graph, path})%>
      let margin = {top: 10, right: 0, bottom: 30, left: 0},
        width = 1000 - margin.left - margin.right,
        height = 1000 - margin.top - margin.bottom;
        
        // Creating the network object and appending it. This is the "canvas"
        let svg = d3.select("#my_dataviz")
        .append("svg")
          .attr("width", width + margin.left + margin.right)
          .attr("height", height + margin.top + margin.bottom)
        .append("g")
          .attr("transform",
                "translate(" + margin.left + "," + margin.top + ")");
        // Quickstart guide: Download 'Live Server' extension on VSC and host the directory. 
        // Port 5500 should be the default.
          // Node tooltip at default, will show on hover
        let div = d3.select("body").append("div")
          .attr("class", "tooltip")
          .style("opacity", 0);
          // Initialization of the links and their description
        let link = svg
          .selectAll("line")
          .data(data.graph.links)
          .enter()
          .append("line")
            .style("stroke", (d) => {
              return !d.cycle ? "#aaa" : "#fe4545"}) //checks if the links belongs to a cycle
            .style("stroke-width", (d) => {
              return normalizeWeight(d.weight)
            })
          
          // Initialization of the nodes and their description
        let node = svg
          .selectAll("circle")
          .data(data.graph.nodes)
          .enter()
          .append("circle")
            .attr("r", 10)
            .style("fill", "#69b3a2")
          .on('mouseover', function(d, i) {
            d3.select(this).style("fill", function() {
                return d3.rgb(d3.select(this).style("fill")).darker(0.33);
            });
            div.transition()
              .duration(50)
              .style("opacity", 1);
            let name = d.name;
            div.html(name)
              .style("left", (d3.event.pageX + 10) + "px")
              .style("top", (d3.event.pageY - 15) + "px")
            .selectAll("line").transition().duration(100).style("stroke-width", 10)
          })
          .on('mouseout', function (d, i) {
            d3.select(this).style("fill", function() {
                return d3.rgb(d3.select(this).style("fill")).brighter(0.33);
            });
            div.transition()
              .duration('50')
              .style("opacity", 0);
          })
          .call(d3.drag()
            .on("start", dragstarted)
            .on("drag", dragged)
            .on("end", dragended))
        let simulation = d3.forceSimulation(data.graph.nodes)
            .force("link", d3.forceLink()                             // This provides links between nodes
                  .id((d) => { return d.name })                  // This provides the id of a node. In this case, name/code of the currency. They're unique in this scenario.
                  .links(data.graph.links)                                  // This provides the source data of the links
            )
            .force("charge", d3.forceManyBody().strength(-600))       // This adds repulsion between nodes. Positive value equals attraction. Generally used to "scale" the network
            .force("center", d3.forceCenter(width / 2, height / 2))   // This force attracts nodes to the center of the svg area
            .on("tick", ticked);
        function ticked() {
          link
            .attr("x1", (d) => { return d.source.x; })
            .attr("y1", (d) => { return d.source.y; })
            .attr("x2", (d) => { return d.target.x; })
            .attr("y2", (d) => { return d.target.y; });
          node
            .attr("cx", (d) => { return d.x; })
            .attr("cy", (d) => { return d.y; });
        }
        function dragstarted(d) {
          // fx and fy values are used to assign a new position given by us.
          // API reference to fx and fy values: https://github.com/d3/d3-force/blob/v3.0.0/README.md#simulation_nodes

          // Once dragging is detected, it sets alphaTarget to >0, allowing the interaction to start. 
          // The simulation stops at alphaTarget == 0. See dragended() for other implications of this.
          if (!d3.event.active) simulation.alphaTarget(0.3).restart();
          d.fx = d.x;
          d.fy = d.y;
        }
        function dragged(d) {
          // The actual drag mechanics
          d.fx = d3.event.x;
          d.fy = d3.event.y;
        }  
        function dragended(d) {
          // Since the simulation stops at alphaTarget == 0, this can be beneficial for performance (alphaTarget is updated at each tick).
          // Once we are not dragging we end the drag event.
          // We disable fx and fy since if we leave them to certain value they will be fixed to that value.
          if (!d3.event.active) simulation.alphaTarget(0);
          d.fx = null;
          d.fy = null;
        }
        function normalizeWeight(val) {
          /**
           * This method normalizes the link weight between min and max variables.
           * It exists to make links have varying stroke width depending on link.weight,
           * But without odd outliers.
           * @param val value to be normalized. Contextually, it is the weight of a link
           * @returns normalized weight between newMin and newMax variables
           * @version 1.0.0
           */
          let weights = []
          data.graph.links.forEach(elm => { weights.push(elm.weight) })
          weights = weights.map((elm) => Math.abs(elm))
          let min = Math.min(...weights)
          let max = Math.max(...weights)
          let newMin = 1
          let newMax = 5
          return (newMax - newMin) / (max - min) * (val - min) + newMin
        }
  </script>
</html>

<!--
  TODO:
  Get hover over a node highlight its outgoing links + show their weights in a tooltip
-->